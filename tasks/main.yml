---
- name: VM exists check
  import_tasks: vm_exists_check.yml

- name: Create a virtual machine from template
  vmware_guest:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_user }}"
    password: "{{ vcenter_pass }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ esxi_folder }}"
    name: "{{ host_name }}"
    template: "{{ os_template }}"
    state: poweredon
    esxi_hostname: "{{ esxi_host }}"
    disk:
    - size_gb: "{{ root_disk_size }}"
      type: thin
      datastore: "{{ root_disk_datastore }}"
    hardware:
      memory_gb: "{{ memory_size }}"
      memory_reservation_lock: true
      num_cpus: "{{ cpu_number }}"
      num_cpu_cores_per_socket: "{{ cpu_number }}"
      scsi: paravirtual
    networks:
    - name: "{{ network_seg }}"
      ip: "{{ host_ip }}"
      netmask: "{{ subnetmask }}"
      gateway: "{{ default_gateway }}"
    wait_for_ip_address: yes
  delegate_to: localhost
  register: deploy_vm

- debug: var=deploy_vm

- name: connect to network
  vmware_guest_network:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_user }}"
    password: "{{ vcenter_pass }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    name: "{{ host_name }}"
    networks:
      - state: present
        label: "{{ deploy_vm.instance.hw_eth0.label }}"
        start_connected: true
  delegate_to: localhost

- name: stop VM
  vmware_guest_powerstate:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_user }}"
    password: "{{ vcenter_pass }}"
    validate_certs: no
    name: "{{ host_name }}"
    state: powered-off
  delegate_to: localhost

- name: start VM
  vmware_guest_powerstate:
    hostname: "{{ vcenter_host }}"
    username: "{{ vcenter_user }}"
    password: "{{ vcenter_pass }}"
    validate_certs: no
    name: "{{ host_name }}"
    state: powered-on
  delegate_to: localhost

- name: Add Disk
  include_tasks: disk_add.yml
  with_indexed_items: "{{ vmware_disk_params }}"
  loop_control:
    loop_var: disk_param

- name: Wait until you can ssh for Linux
  wait_for:
    host: "{{ host_ip }}"
    port: 22
    delay: 30
    search_regex: OpenSSH
  when: server_os_family == "Linux"
  connection: local
  become: false

- name: Wait until you can WinRM for Windows
  wait_for_connection:
    timeout: 300
  when: server_os_family == "Windows"
